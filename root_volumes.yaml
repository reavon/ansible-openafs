---
- gather_facts: yes
  hosts:
  - openafs_databases
  - openafs_fileservers

# todo: move create root.afs volume to here?
#       move create admin user with -localauth to here?
# -hosts: fs[0]
#   create root.afs if not dynroot

- name: Setup OpenAFS volumes
  hosts: openafs_clients[0]
  vars:
    cell: example.com
    realm: EXAMPLE.COM
    server: "{{ groups['openafs_fileservers'][0] }}"
    part: "{{ hostvars[groups['openafs_fileservers'][0]]['vicep'][0] }}"
    kinit: /usr/bin/kinit
    aklog: /usr/bin/aklog
    fs: /usr/bin/fs
    vos: /usr/sbin/vos
  roles:
    - role: kerberos_client
      become: yes
    - role: openafs_client
      become: yes
  tasks:
    # TODO: openafs modules?

    # Get admin token
    # TODO: become_method to get a token?
    - copy:
        # TODO: how to get keytab src path? move this to the client role?
        src: keytabs/afs01.example.com/var/kerberos/keytabs/admin.admin.keytab
        dest: admin.admin.keytab
    - command: "{{ kinit }} -k -t admin.admin.keytab admin/admin@{{ realm }}"
    - command: "{{ aklog }} -d -c {{ cell }}"

    # Create the afs root volume.
    - name: Create afs root volume
      command: "{{ vos }} create -server {{ server }} -partition {{ part }} -name root.afs -verbose"
      register: vos_result
      changed_when: vos_result.rc == 0
      failed_when: >
        vos_result.rc != 0
        and 'Volume root.afs already exists' not in vos_result.get('stderr','')

    - command: "{{ fs }} setacl /afs/.:mount/{{ cell }}:root.afs/. system:anyuser read"

    # Create the cell root volume.
    - name: Create cell root volume
      command: "{{ vos }} create -server {{ server }} -partition {{ part }} -name root.cell -verbose"
      register: vos_result
      changed_when: vos_result.rc == 0
      failed_when: >
        vos_result.rc != 0
        and 'Volume root.cell already exists' not in vos_result.get('stderr','')

    - command: "{{ fs }} setacl /afs/.:mount/{{ cell }}:root.cell/. system:anyuser read"

    - command: "{{ fs }} mkmount /afs/.:mount/{{ cell }}:root.afs/{{ cell }} root.cell {{ cell }}"
      register: fs_result
      changed_when: fs_result.rc == 0
      failed_when: >
        fs_result.rc != 0
        and 'File exists' not in fs_result.get('stderr','')

    # Replicate the cell root volume.
    - command: "{{ vos }} addsite -server {{ server }} -part {{ part }} -id root.cell"
      register: vos_result
      changed_when: vos_result.rc == 0
      failed_when: >
        vos_result.rc != 0
        and 'RO already exists on partition' not in vos_result.get('stderr','')

    - command: "{{ vos }} release root.cell -verbose"

    - command: "{{ fs }} mkmount /afs/.:mount/{{ cell }}:root.afs/.{{ cell }} root.cell {{ cell }} -rw"
      register: fs_result
      changed_when: fs_result.rc == 0
      failed_when: >
        fs_result.rc != 0
        and 'File exists' not in fs_result.get('stderr','')

    - command: "{{ fs }} checkvolumes"

    # Replicate the afs root volume.
    - command: "{{ vos }} addsite -server {{ server }} -part {{ part }} -id root.afs"
      register: vos_result
      changed_when: vos_result.rc == 0
      failed_when: >
        vos_result.rc != 0
        and 'RO already exists on partition' not in vos_result.get('stderr','')

    - command: "{{ vos }} release root.afs -verbose"

